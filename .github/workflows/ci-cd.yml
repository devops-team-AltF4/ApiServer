name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    defaults :
      run :
        shell : bash
        working-directory : terraform/

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#       - name: Terraform Format
#         id: fmt
#         run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true


      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

env:
  AWS_REGION: ap-northeast-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: dev-api           # set this to your Amazon ECR repository name
#   ECS_SERVICE: project4-service                 # set this to your Amazon ECS service name
#   ECS_CLUSTER: project4-dev                 # set this to your Amazon ECS cluster name
#   ECS_TASK_DEFINITION: .aws/task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: apiserver          # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read
  actions: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg RDS_USERNAME=${{ secrets.RDS_USERNAME }} --build-arg RDS_PASSWORD=${{ secrets.RDS_PASSWORD }} --build-arg RDS_HOSTNAME=${{ secrets.RDS_HOSTNAME }} --build-arg RDS_DATABASE=project4 .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  slack-notification:
      if: ${{ always() }}
      needs: [deploy]
      runs-on: ubuntu-latest
      steps:
        - name: Set CUSTOM_STATUS Env Variable
          run: |
            if [ "${{ needs.deploy-dev.result }}" = "failure" ] || \
               [ "${{ needs.deploy-prod.result }}" = "failure" ];
            then
              CUSTOM_STATUS="❌ 실패"
            elif [ "${{ needs.deploy-dev.result }}" = "cancelled" ] || \
              [ "${{ needs.deploy-prod.result }}" = "cancelled" ];
            then
              CUSTOM_STATUS="⚠️ 취소"
            else
              CUSTOM_STATUS="✅ 성공"
            fi
            echo "CUSTOM_STATUS=${CUSTOM_STATUS}" >> $GITHUB_ENV
        - name: slack-send
          uses: slackapi/slack-github-action@v1.19.0
          with:
            payload: |
              {
                "custom_status": "${{ env.CUSTOM_STATUS }}",
                "workflow": "${{ github.workflow }}",
                "job_deploy_dev": "deploy",
                "status_deploy_dev": "${{ needs.deploy-.result }}",
                "actor": "${{ github.actor }}",
                "ref_name": "${{ github.ref_name }}",
                "head_commit_url": "${{ github.event.head_commit.url }}",
                "action_run_url": "${{ env.ACTION_RUN_URL }}"
              }
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_DEV }}
            ACTION_RUN_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  

  api-server:
    # job이 돌아갈 환경
    # needs: auth-server1
    runs-on: ubuntu-latest
    needs: deploy
    defaults :
      run :
        shell : bash
        working-directory : docker-compose/

    # job에서 동작할 task들의 모음
    steps:
      - uses: actions/checkout@v2
      - uses: marocchino/setup-ecs-cli@v1
        with:
          version: "v1.18.0"
      - name: ecs service
        run: |
          ecs-cli configure --cluster project4-dev --default-launch-type EC2 --config-name project4-dev --region ap-northeast-2
          ecs-cli configure profile --access-key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret-key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile-name project4-dev
          ecs-cli up --keypair projectju --capability-iam --size 1 --instance-type t2.medium --cluster-config project4-dev --ecs-profile project4-dev --vpc ${{ secrets.AWS_VPC }} --security-group ${{ secrets.AWS_SECURITY_GROUP }} --subnets ${{ secrets.AWS_SUBNETS_1 }},${{ secrets.AWS_SUBNETS_2 }} --region ap-northeast-2
          ecs-cli compose service up --cluster-config project4-dev --ecs-profile project4-dev --target-group-arn ${{ secrets.AWS_API_TARGET_GROUP_ARN }} --container-name APIserver --container-port 80 --vpc ${{ secrets.AWS_VPC }} --launch-type EC2